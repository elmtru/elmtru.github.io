import{s as Qe,e as l,a as o,H as N,b as n,V as c,f as i,d,A as O,g as t,h as B,i as s,t as be}from"./scheduler.DSZzDcX6.js";import{S as We,i as Xe,b as Fe,d as Ve,m as Ye,t as De,a as Je,e as Ke}from"./index.Ck97c3H1.js";import{T as ot}from"./Toc.DMdpeWps.js";function it(we){let r,f="Contributing",h,u,v="ðŸ™‹ How can I help?",p,m,xe='Pull requests to improve docs, test coverage or examples are always welcome! If you want to implement a new feature, please submit an issue first so we can discuss project-fit. You can also look for <a href="https://github.com/janosh/elementari/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22" rel="nofollow">issues labeled â€˜help wantedâ€™</a> and open a PR to close one of those. If you donâ€™t finish, youâ€™re welcome to submit it as draft PR anyway. Someone else might take over.',U,g,ke="ðŸš€ Submit a PR",F,_,Ce="To submit a pull request, clone the repo, install dependencies and start the dev server to see changes as you make them.",V,b,Y,Ze=`<code class="language-sh"><span class="token function">git</span> clone https://github.com/janosh/elementari
<span class="token builtin class-name">cd</span> elementari
<span class="token function">npm</span> run <span class="token function">install</span>
<span class="token function">npm</span> dev</code>`,D,w,ye="Before you start committing, create and check out a descriptively named branch:",J,x,K,et=`<code class="language-sh"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> my-cool-new-feature
<span class="token comment"># or</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> docs-on-something
<span class="token comment"># or</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> test-some-feature</code>`,Q,k,Pe="To ensure your changes didnâ€™t break anything, run the full test suite (which also runs in CI):",W,C,X,tt='<code class="language-sh"><span class="token function">npm</span> <span class="token builtin class-name">test</span></code>',Z,y,He="Any new features should come with corresponding tests. If you fix a bug, please add a test that fails under the old code and passes with your changes. If youâ€™re having trouble writing tests, you can submit your PR anyway. Others might be able to help with tests but chances are your code will take longer to get merged.",ee,P,Te="âœ… CI checks",te,H,je="This repo has 3 required CI checks that have to pass for every PR before merging:",ae,T,Le='<li>tests: run as <a href="https://github.com/janosh/elementari/actions/workflows/test.yml" rel="nofollow">GitHub Action</a> (<a href="https://github.com/janosh/elementari/blob/main/.github/workflows/test.yml" rel="nofollow">workflow code</a>)</li> <li>linting: handled by <a href="https://results.pre-commit.ci/latest/github/janosh/elementari/main" rel="nofollow">pre-commit.ci</a></li> <li>docs: <a href="https://github.com/janosh/elementari/blob/main/.github/workflows/gh-pages.yml" rel="nofollow">continuous deployment</a> through GitHub Pages</li>',se,j,Me="ðŸ†• New release",le,L,$e="To make a release, increase the <code>&quot;version&quot;</code> field in <code>package.json</code>. This package follows semantic versioning, meaning",ne,M,Ee="<li><code>v[x.y.z] -&gt; v[x+1.y.z]</code>: major release with breaking changes</li> <li><code>v[x.y.z] -&gt; v[x.y+1.z]</code>: minor release with new features</li> <li><code>v[x.y.z] -&gt; v[x.y.z+1]</code>: patch release with bug fixes</li>",oe,$,Re="Now run the <code>changelog</code> script from <code>package.json</code> to update <code>changelog.md</code>.",ie,E,pe,at='<code class="language-sh"><span class="token function">npm</span> changelog  <span class="token comment"># or npm run changelog</span></code>',ce,R,ze="If there have been significant code changes since the last release, itâ€™s good to update the coverage badges in the readme.",re,z,ue,st='<code class="language-sh"><span class="token function">npm</span> update-coverage</code>',me,I,Ie="Then commit <code>package.json</code>, <code>changelog.md</code> and <code>readme.md</code> files to the <code>main</code> branch using the new version number prefixed by <code>&#39;v&#39;</code> as commit message and tag:",fe,q,he,lt=`<code class="language-sh"><span class="token function">git</span> <span class="token function">add</span> package.json changelog.md readme.md
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> vx.y.z
<span class="token function">git</span> tag <span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> log <span class="token parameter variable">-1</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>%B<span class="token variable">)</span></span></code>`,de,A,qe="Push the release commit and tag to <code>origin/main</code>:",ve,S,ge,nt='<code class="language-sh"><span class="token function">git</span> push <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push <span class="token parameter variable">--tags</span></code>',_e,G,Ae='Finally <a href="https://github.com/janosh/elementari/releases/new" rel="nofollow">publish a new release on GitHub</a>.';return{c(){r=l("h1"),r.textContent=f,h=o(),u=l("h2"),u.textContent=v,p=o(),m=l("p"),m.innerHTML=xe,U=o(),g=l("h2"),g.textContent=ke,F=o(),_=l("p"),_.textContent=Ce,V=o(),b=l("pre"),Y=new N(!1),D=o(),w=l("p"),w.textContent=ye,J=o(),x=l("pre"),K=new N(!1),Q=o(),k=l("p"),k.textContent=Pe,W=o(),C=l("pre"),X=new N(!1),Z=o(),y=l("p"),y.textContent=He,ee=o(),P=l("h2"),P.textContent=Te,te=o(),H=l("p"),H.textContent=je,ae=o(),T=l("ul"),T.innerHTML=Le,se=o(),j=l("h2"),j.textContent=Me,le=o(),L=l("p"),L.innerHTML=$e,ne=o(),M=l("ul"),M.innerHTML=Ee,oe=o(),$=l("p"),$.innerHTML=Re,ie=o(),E=l("pre"),pe=new N(!1),ce=o(),R=l("p"),R.textContent=ze,re=o(),z=l("pre"),ue=new N(!1),me=o(),I=l("p"),I.innerHTML=Ie,fe=o(),q=l("pre"),he=new N(!1),de=o(),A=l("p"),A.innerHTML=qe,ve=o(),S=l("pre"),ge=new N(!1),_e=o(),G=l("p"),G.innerHTML=Ae,this.h()},l(e){r=n(e,"H1",{"data-svelte-h":!0}),c(r)!=="svelte-j1jfn0"&&(r.textContent=f),h=i(e),u=n(e,"H2",{"data-svelte-h":!0}),c(u)!=="svelte-1swhrad"&&(u.textContent=v),p=i(e),m=n(e,"P",{"data-svelte-h":!0}),c(m)!=="svelte-u7xyuv"&&(m.innerHTML=xe),U=i(e),g=n(e,"H2",{"data-svelte-h":!0}),c(g)!=="svelte-1dop5wg"&&(g.textContent=ke),F=i(e),_=n(e,"P",{"data-svelte-h":!0}),c(_)!=="svelte-fze45w"&&(_.textContent=Ce),V=i(e),b=n(e,"PRE",{class:!0});var a=d(b);Y=O(a,!1),a.forEach(t),D=i(e),w=n(e,"P",{"data-svelte-h":!0}),c(w)!=="svelte-1wkbhdd"&&(w.textContent=ye),J=i(e),x=n(e,"PRE",{class:!0});var Se=d(x);K=O(Se,!1),Se.forEach(t),Q=i(e),k=n(e,"P",{"data-svelte-h":!0}),c(k)!=="svelte-1l5ik9r"&&(k.textContent=Pe),W=i(e),C=n(e,"PRE",{class:!0});var Ge=d(C);X=O(Ge,!1),Ge.forEach(t),Z=i(e),y=n(e,"P",{"data-svelte-h":!0}),c(y)!=="svelte-1fvenwo"&&(y.textContent=He),ee=i(e),P=n(e,"H2",{"data-svelte-h":!0}),c(P)!=="svelte-1qrej8w"&&(P.textContent=Te),te=i(e),H=n(e,"P",{"data-svelte-h":!0}),c(H)!=="svelte-5rh020"&&(H.textContent=je),ae=i(e),T=n(e,"UL",{"data-svelte-h":!0}),c(T)!=="svelte-6o51hm"&&(T.innerHTML=Le),se=i(e),j=n(e,"H2",{"data-svelte-h":!0}),c(j)!=="svelte-qye572"&&(j.textContent=Me),le=i(e),L=n(e,"P",{"data-svelte-h":!0}),c(L)!=="svelte-11gj9su"&&(L.innerHTML=$e),ne=i(e),M=n(e,"UL",{"data-svelte-h":!0}),c(M)!=="svelte-arxpeg"&&(M.innerHTML=Ee),oe=i(e),$=n(e,"P",{"data-svelte-h":!0}),c($)!=="svelte-1b1myo7"&&($.innerHTML=Re),ie=i(e),E=n(e,"PRE",{class:!0});var Ne=d(E);pe=O(Ne,!1),Ne.forEach(t),ce=i(e),R=n(e,"P",{"data-svelte-h":!0}),c(R)!=="svelte-7pyzox"&&(R.textContent=ze),re=i(e),z=n(e,"PRE",{class:!0});var Oe=d(z);ue=O(Oe,!1),Oe.forEach(t),me=i(e),I=n(e,"P",{"data-svelte-h":!0}),c(I)!=="svelte-4bzxdb"&&(I.innerHTML=Ie),fe=i(e),q=n(e,"PRE",{class:!0});var Be=d(q);he=O(Be,!1),Be.forEach(t),de=i(e),A=n(e,"P",{"data-svelte-h":!0}),c(A)!=="svelte-1gouoxa"&&(A.innerHTML=qe),ve=i(e),S=n(e,"PRE",{class:!0});var Ue=d(S);ge=O(Ue,!1),Ue.forEach(t),_e=i(e),G=n(e,"P",{"data-svelte-h":!0}),c(G)!=="svelte-173ne07"&&(G.innerHTML=Ae),this.h()},h(){Y.a=null,B(b,"class","language-sh"),K.a=null,B(x,"class","language-sh"),X.a=null,B(C,"class","language-sh"),pe.a=null,B(E,"class","language-sh"),ue.a=null,B(z,"class","language-sh"),he.a=null,B(q,"class","language-sh"),ge.a=null,B(S,"class","language-sh")},m(e,a){s(e,r,a),s(e,h,a),s(e,u,a),s(e,p,a),s(e,m,a),s(e,U,a),s(e,g,a),s(e,F,a),s(e,_,a),s(e,V,a),s(e,b,a),Y.m(Ze,b),s(e,D,a),s(e,w,a),s(e,J,a),s(e,x,a),K.m(et,x),s(e,Q,a),s(e,k,a),s(e,W,a),s(e,C,a),X.m(tt,C),s(e,Z,a),s(e,y,a),s(e,ee,a),s(e,P,a),s(e,te,a),s(e,H,a),s(e,ae,a),s(e,T,a),s(e,se,a),s(e,j,a),s(e,le,a),s(e,L,a),s(e,ne,a),s(e,M,a),s(e,oe,a),s(e,$,a),s(e,ie,a),s(e,E,a),pe.m(at,E),s(e,ce,a),s(e,R,a),s(e,re,a),s(e,z,a),ue.m(st,z),s(e,me,a),s(e,I,a),s(e,fe,a),s(e,q,a),he.m(lt,q),s(e,de,a),s(e,A,a),s(e,ve,a),s(e,S,a),ge.m(nt,S),s(e,_e,a),s(e,G,a)},p:be,i:be,o:be,d(e){e&&(t(r),t(h),t(u),t(p),t(m),t(U),t(g),t(F),t(_),t(V),t(b),t(D),t(w),t(J),t(x),t(Q),t(k),t(W),t(C),t(Z),t(y),t(ee),t(P),t(te),t(H),t(ae),t(T),t(se),t(j),t(le),t(L),t(ne),t(M),t(oe),t($),t(ie),t(E),t(ce),t(R),t(re),t(z),t(me),t(I),t(fe),t(q),t(de),t(A),t(ve),t(S),t(_e),t(G))}}}class pt extends We{constructor(r){super(),Xe(this,r,null,it,Qe,{})}}function ct(we){let r,f,h,u,v;return f=new pt({}),u=new ot({props:{headingSelector:"main > :where(h2)",breakpoint:1250}}),{c(){r=l("main"),Fe(f.$$.fragment),h=o(),Fe(u.$$.fragment)},l(p){r=n(p,"MAIN",{});var m=d(r);Ve(f.$$.fragment,m),m.forEach(t),h=i(p),Ve(u.$$.fragment,p)},m(p,m){s(p,r,m),Ye(f,r,null),s(p,h,m),Ye(u,p,m),v=!0},p:be,i(p){v||(De(f.$$.fragment,p),De(u.$$.fragment,p),v=!0)},o(p){Je(f.$$.fragment,p),Je(u.$$.fragment,p),v=!1},d(p){p&&(t(r),t(h)),Ke(f),Ke(u,p)}}}class rt extends We{constructor(r){super(),Xe(this,r,null,ct,Qe,{})}}const ht=Object.freeze(Object.defineProperty({__proto__:null,default:rt},Symbol.toStringTag,{value:"Module"}));export{rt as P,ht as _};
